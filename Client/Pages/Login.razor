@page "/login"
@inject IAccountLoginDTO Model
@inject ILazor Lazor
@inject HttpClient Http;
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@Model" OnSubmit="async () => await HandleLogin()">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="Model.Email" class="form-control" />
                <div class="small form-text text-danger">
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="form-control" />
                <div class="small form-text text-danger">
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
            </div>
                <LoadingButton Loading="@Lazor.Loading">Login</LoadingButton>
                <span class="small form-text text-danger">@Lazor.ErrorMessage</span>
            <NavLink href="register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>


@code {
    public async Task HandleLogin()
    {
        Lazor.SetLoadingStatus(true);
        try
        {
        var response = await Http.PostAsJsonAsync("/api/Account/Login", Model);
        bool isLoggedIn = response.IsSuccessStatusCode;
        
            if(isLoggedIn)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Lazor.SetErrorMessage("Invalid login attempt.");
            }

        }
        catch
        {
            Lazor.SetErrorMessage("There was an error. Please try again.");
        }
        Lazor.SetLoadingStatus(false);
        StateHasChanged();
        return;
    }
}
