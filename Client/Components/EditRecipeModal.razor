@inject HttpClient Http
@inject ILogger<IRecipeDTO> logger

<div class="@e.ToggleTarget">
    <div class="l-modal">
        <div class="card">
            <h4 class="card-header">
                Modal
                <button type="button" @onclick="HandleClick" class="btn btn-danger float-right">&times;</button>
            </h4>
            <div class="card-body">

                @{
                    if (e.isSuccess)
                    {
                        <h4 class="text-center text-success">Success!</h4>
                    }
                    else
                    {
                        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="Title">
                                    Title:
                                    <InputText id="Title" @bind-Value="@model.Title" />
                                    <div class="small form-text text-danger">
                                        <ValidationMessage For="@(() => model.Title)" />
                                    </div>
                                </label>
                            </div>
                            <div class="form-group">
                                <label for="Description">
                                    Description:
                                    <InputTextArea id="Description" @bind-Value="@model.Description" />
                                </label>
                            </div>

                            <CascadingValue Name="Model" Value="@model">
                                <IngredientsForm />
                                <ValidationMessage For="@(() => model.Ingredients)" />
                                <InstructionsForm />
                                <ValidationMessage For="@(() => model.Instructions)" />
                            </CascadingValue>

                            <span class="small form-text text-danger">@e.ErrorMessage</span>


                            <CascadingValue Name="Loading" Value="@e.Loading">
                                <LoadingButton>Submit</LoadingButton>
                            </CascadingValue>
                        </EditForm>
                    }
                }

            </div>
        </div>
    </div>
</div>


@code {

    [CascadingParameter(Name = "LazorObject")]
    public ILazor e { get; set; }

    [CascadingParameter(Name = "RecipeDTO")]
    public IRecipeDTO model { get; set; }

    [CascadingParameter(Name = "RecipeUrlDTO")]
    public IRecipeUrlDTO recipeURLDTO { get; set; }

    [Parameter]
    public Action HandleClick { get; set; }

    private async Task<IRecipeDTO> HandleValidSubmit()
    {
        try
        {
            bool ingredientsAreValid = e.IsPropertyValid(model, "Ingredients", model.Ingredients);
            bool instructionsAreValid = e.IsPropertyValid(model, "Instructions", model.Instructions);

            if (ingredientsAreValid && instructionsAreValid)
            {
                e.Loading = true;

                var response = await Http.PostAsJsonAsync<IRecipeDTO>("/api/Recipe/NewRecipe", model);
                if (response.IsSuccessStatusCode)
                {
                    e.isSuccess = true;
                    logger.LogInformation($"Successfully posted new recipe \"{model.Title}\" to RecipeController. Timestamp: {DateTime.Now:MM/dd/yyyy HH:mm:ss}");
                    model.ResetRecipe();
                    return model;
                }
                logger.LogError($"Failed to post new recipe \"{model.Title}\" to RecipeController. Server responded with {response.StatusCode}. Timestamp: {DateTime.Now:MM/dd/yyyy HH:mm:ss}");
                e.ErrorMessage = $"Sorry, something went wrong. Server responded with {response.StatusCode}.";
                return model;
            }
        }
        catch (Exception err)
        {
            e.ErrorMessage = $"Sorry, something went wrong. Error {e.ErrorMessage}.";
            logger.LogError($"Exception occured when posting new recipe \"{model.Title}\" to RecipeController. Timestamp: {DateTime.Now:MM/dd/yyyy HH:mm:ss}", err.Message);
        }
        e.Loading = false;
        return model;
    }

}

