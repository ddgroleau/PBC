@inject HttpClient Http
@inject ILazor e
@inject IRecipeUrlDTO model
@inject IRecipeDTO recipeDTO
@inject ILogger<IRecipeUrlDTO> logger

<div class="card">
    <h4 class="card-header">Add a Recipe</h4>
    <div class="card-body">
        <EditForm Model="@model" OnSubmit="HandleSubmit">
            <DataAnnotationsValidator />

            <InputText @bind-Value="model.URL" class="form-control" DisplayName="Recipe URL" />
            <ValidationMessage For="@(() => model.URL)" />
            <span class="small form-text text-danger">@e.ErrorMessage</span>

            <CascadingValue Name="Loading" Value="@e.Loading">
                <LoadingButton>Add</LoadingButton>
            </CascadingValue>

        </EditForm>
    </div>

    <CascadingValue Name="LazorObject" Value="@e">
        <CascadingValue Name="RecipeDTO" Value="@recipeDTO">
            <EditRecipeModal />
        </CascadingValue>
    </CascadingValue>
</div>
@code {
    public async Task<IRecipeDTO> HandleSubmit()
    {
        e.Loading = true;
        e.ErrorMessage = null;

        bool urlIsValid = e.IsPropertyValid(model, "URL", model.URL);

        if (urlIsValid)
        {
            try
            {
                var response = await Http.PostAsJsonAsync<IRecipeUrlDTO>("/api/Recipe/RecipeURL", model);

                var scrapedRecipe = await response.Content.ReadFromJsonAsync<RecipeDTO>();
                recipeDTO = scrapedRecipe;
            }
            catch (Exception e)
            {
                logger.LogError("Failed to post RecipeUrlDTO to RecipeController.", e);
            }
            e.Toggle();
        }
        e.Loading = !e.Loading;
        return recipeDTO;
    }

}
